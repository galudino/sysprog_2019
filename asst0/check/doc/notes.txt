// Notes go here.

quote - only allowed at start or end of expr
operand:
    permitted:
        first char after quote
        after whitespace

operator:
    permitted:
        after

0. Tokenize argv[1] and store each string in a vector.
    define delimiter. default is ';'
    character by character, 




Found 4 expressions: 2 arithmetic and 2 logical.
OK.

expr(0): error: expected '"' after expression end
    "true and false
                   ^
expr(1):

note
error
warning

expression(0): error: expression was not ended
    "1 + 2 1"
          ^
expression(0): error: unexpected operand
    "1 + 2 1"
           ^


Found 3 expressions: 2 logical and 1 arithmetic.
Error: Operand type mismatch in expression 2
    "true & 5"
            ^

You will have the input string,
a "cursor" variable that will keep the address of the current character position within the input string,
and an integer to keep track of the numerical index of the current expression.
Once you've separated an expression from the bulk input string,
copy it and store it with the rest of the expressions that you will be tokenizing.

Let's say we've reached our delimiter (defined to be ';')

input_string                  "3 + 2; true AND false"
cursor_variable                     ^
index                               6

copy_string                   3 + 2; true AND false

copy_string, null terminated at copy_string[6]
                              3 + 2

stash copy_string for later use with the rest of the exprs

move cursor_variable          "3 + 2; true AND false"
                                     ^

input_string (unprocessed input) is now:
                               true AND false"
                              ^ one char of whitespace before 't'

reset index to 0.
repeat until input_string depleted of chars.


first:
    operands allowed:
        arithmetic
        logical
    operators allowed:
        logical NOT
second:
    operands allowed:
        if logical NOT at first:
            logical
                if no more expr, no semicolon
                else must have semicolon before next expr
                go back to first
    operators allowed:
        if arithmetic at first:
            arithmetic
        else if logical at first:
            logical
third:
    operands allowed:
        if arithmetic at second:
            arithmetic
                if no more expr, no semicolon
                else must have semicolon before next expr
                go back to first
        else if logical at second:
            logical
                if no more expr, no semicolon
                else must have semicolon before next expr
                go back to first




printf("\"");
for (tokno = 0; tokno < vt_size; tokno++) {
    char *s = *(gcs__vstr_at(vt, tokno));
    s += s[0] == (*delimiter_token) ? 1 : 0;
    printf("%s", s);
    if (tokno < vt_size - 1) {
        printf(" ");
    }
}
printf("\"");


int check__fexpr_err(FILE *dest,
                     const char *err_type,
                     const char *desc,
                     const char *expr_fragmt,
                     uint32_t ct_expr,
                     int index) {
    char buffer[BUFFER_SIZE];
    char spaces[BUFFER_SIZE];
    int i = 0;
    int j = 0;

    gcs__strcpy(spaces, "\t");

    if (index > -1) {
        for (i = 1; i <= index + 1; i++) {
            *(spaces + i) = ' ';
        }
    }

    j += sprintf(buffer + j,
                 "%s: " KWHT_b "%s" KNRM " in " KMAG_b "expression %d" KNRM
                 ": %s in\n\t\"%s\"\n",
                 KRED_b "Error" KNRM,
                 err_type,
                 ct_expr,
                 desc,
                 expr_fragmt);

    /* TODO: implementation of '^', appears under problematic character.
    if (index > -1) {
        j += sprintf(buffer + j, "%s%s", spaces, KYEL_b "^" KNRM);
    }
    */

    j += fprintf(dest, "%s\n", buffer);

    return j;
}
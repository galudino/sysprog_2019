/**
 *  @file       notes.txt
 *  @brief      Class notes
 *
 *  @author     Gemuele Aludino
 *  @date       05 Sep 2019
 *  @copyright  Copyright Â© 2019 Gemuele Aludino
 */


/* LAST CLASS --------------------------- */
Don't use C99!
ANSI-C only.
You will have to fork gcslib for ANSI-C.

Don't use -fsanitize.

iLabs run on CentOS Linux. (Red Hat)

Asking questions:
    What do you think the problem is?
    (where in the code is it?)

    What have you done so far?
    (input/output, tests, Google?)

/* CONFORM TO C89 */
-std=c89 -pedantic-errors
OR
-ansi

... no // comments
... variable decl at the top of the scope
    don't intermingle with code
..  no variable length arrays
..  no for (int i = 0; i < n; i++) ...


/* -------------------------------------- */


C is 'memory oriented'
arrays

a type is...
    a length    sizeof
    a format    (type ?)

different types have different sizes...

char, or int8_t     8 bit integer
short, or int16_t   16 bit integer  (iLab)
int, or int32_t     32 bit integer  (iLab)

short <= int <= long

C89/ANSI C does not support variable length
arrays. That is a C99 feature and newer

sizeof returns byte size.
sizeof(ARR) / sizeof(TYPE) yields length

'strings' are null-terminated char arrays

structs

struct [ID] {
    /* TYPES */
};

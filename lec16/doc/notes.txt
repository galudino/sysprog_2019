/**
 *  @file       notes.txt
 *  @brief      Class notes
 *
 *  @author     Gemuele Aludino
 *  @date       31 Oct 2019
 *  @copyright  Copyright Â© 2019 Gemuele Aludino
 */

------------------------------------------------------------
LAST CLASS:
------------------------------------------------------------
Signals
  software interrupt
  not necessarily an error...just something important
  that needs to be dealt with right now

  exception flavored, in that some code is invoked on your behalf
  when the event occurs
    but signals resume at the instruction running when the signal
    occurred (IF the handler does not kill the proc)

  kill sends a signal to a proc 
    - by default, sends SIGKILL

  fork
    - make a new process by duplicating the current one
  
  wait
    - suspends access of the calling process until one of its
      child processe(s) terminates
      (or waitpid() for a specific one)
        pid_t wait(int *status);
        pid_t waitpid(pid_t pid, int *status, int options);

int atexit(void (*function)(void));

Threads vs procs 
----------------
- threads share the same address space
  - this means it is easy to pass data between them

- kind of like a function you can call;
  but not wait for a return in order to continue
  (promote a function to be asynchronous)

- fast to build
- fast to swap between

blocking
  do not return until done
non-blocking
  may return before done
asynchronous
  always returns immediately, having started a "background"
  effort to fulfill your request

------------------------------------------------------------
POSIX Thread Library (pthreads)
------------------------------------------------------------

pthread_create()
  creates a thread

  int pthread_create(pthread_t *thread, const pthread_attr_t *attr,
                     void *(*start_routine)(void *), void *arg);

  if you have multiple args,
  put it in a struct -- allocate an instance of that struct
  on the heap.

pthread_exit()
  exits a thread

pthread_join()
  waits until a thread is done and gives exit val

pthread_attr_init()

pthread_attr_destroy()

pthread_t is OPAQUE 
------------------------------------------------------------
------------------------------------------------------------
Thread vs proc

Threads: (pthread 'library' ... POSIX thread library)

/* create a thread */
pthread_create(pthread_t *thread, 
               const pthread_attr_t *attr, 
               void *(*start_routine)(void *), 
               void *arg);

- pointer-to-pthread_t (to control/monitor/refer to the thread)
- pthread attribute struct (specify options/behavior for this thread)
- (void *(*)(void *)) that accepts a (void *) and returns a (void *)
- (void *) that corresponds to the (void *) in start_routine

/* join a thread */
pthread_join(pthread_t thread, void **retval);

Why join a thread?
  - get exit status ptr
  - wait for calling thread to terminate
    - indicate that it's done with thread so it can be
      deallocated
  = makes sure that all other threads are done running
    before main returns

/* exit a thread: get an exit status value from a thread */
/* indicate this thread is done running */
/* send an exit status ptr to joining context */
void pthread_exit(void *retval);

- indicate this thread is done running
- send an exit status ptr to joining context

/* init thread attributes object */
pthread_attr_init(pthread_attr_t *attr);

/* destroy thread attributes object */q
pthread_attr_destroy(pthread_attr_t *attr);

/* send a signal to a thread */
pthread_kill(pthread_t thread, int sig);

/* obtain ID of the calling thread */
pthread_t pthread_self(void);
------------------------------------------------------------
Signals: software interrupt
A signal suspends the current process,
figures out what to do based on an error code,
and resumes the process

-----------------------------
main.c:

#include "header.h"

int main(int argc, const char *argv[]) {
    dummy_func();

    return 0;
}
-----------------------------
header.h:

#ifndef HEADER_H
#define HEADER_H

#define dummy_func() stuff()

void stuff(void);

#endif /* HEADER_H */
-----------------------------
source0.c:

void stuff() {
    printf("yup\n");
    return;
}
-----------------------------
source1.c:

void stuff() {
    printf("nope\n");
    return;
}
-----------------------------

Automate through Makefile,
where different targets may specify different libraries to link.
(prototypes of functions must match for this to work)
------------------------------------------------------------

Thread A                            Thread B
--------                            --------
int bal = get_current_balance();    int bal = get_current_balance();
bal = bal - 300;                    bal = bal + 300;

-----------------------------
# cannot move memory to memory.
# must go from memory to register. then register to memory

movl %r2 (%r3)                      movl %r2 (%r3)
subi %r2 $300                       addl %r2 $300
movl (%r3) %r2                      movl (%r3) %r2




Thread A                            Thread B
--------                            --------
int bal = get_current_balance();    int bal = get_current_balance();
bal = bal - 300;                    bal = bal + 300;

-----------------------------

movl %r2 (%r3)                      
                                    movl %r2 (%r3)
                                    addl %r2 $300
subi %r2 $300                       
movl (%r3) %r2                      
                                    movl (%r3) %r2

interleaving writes between shared resources is unpredictable.
what you want is MUTUAL EXCLUSION.
what you want is a MUTEX (a lock).

Use it to demark locations where shared resources are used.

int pthread_mutex_lock(pthread_mutex_t *mutex);
int pthread_mutex_unlock(pthread_mutex_t *mutex);

pthread_mutex_t *lock = PTHREAD_MUTEX_INITIALIZER;

int sum = 0;

void *function(void *arg) {
    pthread_mutex_lock(&lock);
    bal += *(int *)(arg);
    pthread_mutex_unlock(&lock);

    pthread_exit(NULL);
}

Thread A                          Thread B
--------                          --------
pthread_mutex_lock(&lock);        pthread_mutex_lock(&lock);
bal += *(int *)(arg);             bal += *(int *)(arg);
pthread_mutex_unlock(&lock);      pthread_mutex_unlock(&lock);

Mutexes can prevent parallelism. Use it sparingly.
Have one mutex per shared data value.

If all you ever do is read, and writing takes place at different places,
or if the data is constant...you don't need a mutex.

If you have to update shared data at any time...use a mutex.

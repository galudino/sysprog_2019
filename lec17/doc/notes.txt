/**
 *  @file       notes.txt
 *  @brief      Class notes
 *
 *  @author     Gemuele Aludino
 *  @date       05 Nov 2019
 *  @copyright  Copyright Â© 2019 Gemuele Aludino
 */

------------------------------------------------------------
LAST CLASS
------------------------------------------------------------
Thread vs proc

Threads: (pthread 'library' ... POSIX thread library)

/* create a thread */
pthread_create(pthread_t *thread, 
               const pthread_attr_t *attr, 
               void *(*start_routine)(void *), 
               void *arg);

- pointer-to-pthread_t (to control/monitor/refer to the thread)
- pthread attribute struct (specify options/behavior for this thread)
- (void *(*)(void *)) that accepts a (void *) and returns a (void *)
- (void *) that corresponds to the (void *) in start_routine

/* join a thread */
pthread_join(pthread_t thread, void **retval);

Why join a thread?
  - get exit status ptr
  - wait for calling thread to terminate
    - indicate that it's done with thread so it can be
      deallocated
  = makes sure that all other threads are done running
    before main returns

/* exit a thread: get an exit status value from a thread */
/* indicate this thread is done running */
/* send an exit status ptr to joining context */
void pthread_exit(void *retval);

- indicate this thread is done running
- send an exit status ptr to joining context

/* init thread attributes object */
pthread_attr_init(pthread_attr_t *attr);

/* destroy thread attributes object */q
pthread_attr_destroy(pthread_attr_t *attr);

/* send a signal to a thread */
pthread_kill(pthread_t thread, int sig);

/* obtain ID of the calling thread */
pthread_t pthread_self(void);
------------------------------------------------------------
Signals: software interrupt
A signal suspends the current process,
figures out what to do based on an error code,
and resumes the process

-----------------------------
main.c:

#include "header.h"

int main(int argc, const char *argv[]) {
    dummy_func();

    return 0;
}
-----------------------------
header.h:

#ifndef HEADER_H
#define HEADER_H

#define dummy_func() stuff()

void stuff(void);

#endif /* HEADER_H */
-----------------------------
source0.c:

void stuff() {
    printf("yup\n");
    return;
}
-----------------------------
source1.c:

void stuff() {
    printf("nope\n");
    return;
}
-----------------------------

Automate through Makefile,
where different targets may specify different libraries to link.
(prototypes of functions must match for this to work)
------------------------------------------------------------

Thread A                            Thread B
--------                            --------
int bal = get_current_balance();    int bal = get_current_balance();
bal = bal - 300;                    bal = bal + 300;

-----------------------------
# cannot move memory to memory.
# must go from memory to register. then register to memory

movl %r2 (%r3)                      movl %r2 (%r3)
subi %r2 $300                       addl %r2 $300
movl (%r3) %r2                      movl (%r3) %r2




Thread A                            Thread B
--------                            --------
int bal = get_current_balance();    int bal = get_current_balance();
bal = bal - 300;                    bal = bal + 300;

-----------------------------

movl %r2 (%r3)                      
                                    movl %r2 (%r3)
                                    addl %r2 $300
subi %r2 $300                       
movl (%r3) %r2                      
                                    movl (%r3) %r2

interleaving writes between shared resources is unpredictable.
what you want is MUTUAL EXCLUSION.
what you want is a MUTEX (a lock).

Use it to demark locations where shared resources are used.

int pthread_mutex_lock(pthread_mutex_t *mutex);
int pthread_mutex_unlock(pthread_mutex_t *mutex);

pthread_mutex_t *lock = PTHREAD_MUTEX_INITIALIZER;

int sum = 0;

void *function(void *arg) {
    pthread_mutex_lock(&lock);
    bal += *(int *)(arg);
    pthread_mutex_unlock(&lock);

    pthread_exit(NULL);
}

Thread A                          Thread B
--------                          --------
pthread_mutex_lock(&lock);        pthread_mutex_lock(&lock);
bal += *(int *)(arg);             bal += *(int *)(arg);
pthread_mutex_unlock(&lock);      pthread_mutex_unlock(&lock);

Mutexes can prevent parallelism. Use it sparingly.
Have one mutex per shared data value.

If all you ever do is read, and writing takes place at different places,
or if the data is constant...you don't need a mutex.

If you have to update shared data at any time...use a mutex.
------------------------------------------------------------
------------------------------------------------------------
Asst2:

Yes, it is a group project
Have your multi-(proc/thread) code to searching only
Set up randomization and timing outside of proc/threads
and hand in the vector(s) to be searched

1 2 3 4 5
4 2 3 1 5   switch 0 and 3
4 1 3 2 5   switch 1 and 3

search for 1

4 [1] 3 2 5     found at [1]

4 5 3 2 1       swap 1 and 4
4 5 3 2 [1]     found at [4]
4 5 1 2 3       swap 2 and 4


randomly generate the list ONE TIME only.
for each subsequent test,
scramble them.

for a randomly generated list of size p,
partition the list in sublists 
by an interval (p / q),
such that (p mod q) == 0,
and use a process or thread to search each sublist.

1 2 3 4 5
how do you ensure uniqueness and randomness?

generate random indices as opposed to random numbers.

1 2 3 4 5
3 2 1 4 5   0 and 2 switched (0 and 2 randomly generated)
....do this sizeof(list) / sizeof *list times.

for next search, 
put value found in randomly generated index.
------------------------------------------------------------

new process:
  fork()  create new process
  wait()  block until a process is done (collect exit status)

new thread:
  pthread_create(pthread_t *thread,
                 const pthread_attr_t *attr,
                 void *(*start_routine)(void *),
                 void *arg);

  pthread_join()  block until thread is done

mutex:
  pthread_mutex_init
  pthread_mutex_destroy
  pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;

  pthread_mutex_init(&mutex); 

  pthread_mutex_lock(&mutex);
  /* critical section */
  pthread_mutex_unlock(&mutex);

  pthread_mutex_destroy(&mutex);

  - try to keep critical sections small
    (btw: critical section == segment of code where shared data is used)
  
  - one unique mutex per shared data value.

  T0                                    T1
  ---                                   ---
  pthread_mutex_lock(m_shared_A);       pthread_mutex_lock(m_var_B);
  pthread_mutex_lock(m_var_B);          pthread_mutex_lock(m_shared_A)

  shared += var;                        var = 2 + shared;

  pthread_mutex_unlock(m_shared_A);     pthread_mutex_unlock(m_shared_A);
  pthread_mutex_unlock(m_var_B);        pthread_mutex_unlock(m_var_B);

  This is DEADLOCK.

  How to avoid deadlock?
    0.  establish a total ordering on your mutexes
        always lock them in that order.
        if you always lock in order, you cannot deadlock.
    
    1.  once you unlock, 
        do not lock again until all mutexes are unlocked.

          BAD:
          -------
          lock(A);
          lock(C);
          lock(D);

          unlock(A);
          ...
          lock(A);        /* deadlock */
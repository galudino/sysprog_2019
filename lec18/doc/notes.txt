/**
 *  @file       notes.txt
 *  @brief      Class notes
 *
 *  @author     Gemuele Aludino
 *  @date       07 Nov 2019
 *  @copyright  Copyright Â© 2019 Gemuele Aludino
 */

------------------------------------------------------------
LAST CLASS
------------------------------------------------------------
Asst2:

Yes, it is a group project
Have your multi-(proc/thread) code to searching only
Set up randomization and timing outside of proc/threads
and hand in the vector(s) to be searched

1 2 3 4 5
4 2 3 1 5   switch 0 and 3
4 1 3 2 5   switch 1 and 3

search for 1

4 [1] 3 2 5     found at [1]

4 5 3 2 1       swap 1 and 4
4 5 3 2 [1]     found at [4]
4 5 1 2 3       swap 2 and 4


randomly generate the list ONE TIME only.
for each subsequent test,
scramble them.

for a randomly generated list of size p,
partition the list in sublists 
by an interval (p / q),
such that (p mod q) == 0,
and use a process or thread to search each sublist.

1 2 3 4 5
how do you ensure uniqueness and randomness?

generate random indices as opposed to random numbers.

1 2 3 4 5
3 2 1 4 5   0 and 2 switched (0 and 2 randomly generated)
....do this sizeof(list) / sizeof *list times.

for next search, 
put value found in randomly generated index.
------------------------------------------------------------

new process:
  fork()  create new process
  wait()  block until a process is done (collect exit status)

new thread:
  pthread_create(pthread_t *thread,
                 const pthread_attr_t *attr,
                 void *(*start_routine)(void *),
                 void *arg);

  pthread_join()  block until thread is done

mutex:
  pthread_mutex_init
  pthread_mutex_destroy
  pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;

  pthread_mutex_init(&mutex); 

  pthread_mutex_lock(&mutex);
  /* critical section */
  pthread_mutex_unlock(&mutex);

  pthread_mutex_destroy(&mutex);

  - try to keep critical sections small
    (btw: critical section == segment of code where shared data is used)
  
  - one unique mutex per shared data value.

  T0                                    T1
  ---                                   ---
  pthread_mutex_lock(m_shared_A);       pthread_mutex_lock(m_var_B);
  pthread_mutex_lock(m_var_B);          pthread_mutex_lock(m_shared_A)

  shared += var;                        var = 2 + shared;

  pthread_mutex_unlock(m_shared_A);     pthread_mutex_unlock(m_shared_A);
  pthread_mutex_unlock(m_var_B);        pthread_mutex_unlock(m_var_B);

  This is DEADLOCK.

  How to avoid deadlock?
    0.  establish a total ordering on your mutexes
        always lock them in that order.
        if you always lock in order, you cannot deadlock.
    
    1.  once you unlock, 
        do not lock again until all mutexes are unlocked.

          BAD:
          -------
          lock(A);
          lock(C);
          lock(D);

          unlock(A);
          ...
          lock(A);        /* deadlock */
------------------------------------------------------------
------------------------------------------------------------
Files:
  - primitive types
  - functions
  - other pointers (void *)
  - user-defined types

What is an array?
  name (identifier) 
  of array is the base address of a block of memory.
  go index steps of length sizeof(typename),
    stop at capacity

What is a string:
  name (identifier) 
  of string is the base address of a block of memory.
  count bytes from base address until '\0' byte is reached

What is a function?
  name (identifier)
  of function is the base address of the instructions
  keep on consuming next (instruction) until ...
    (stop at ret) stop symbol


What is a ____?
  name (identifier)
  of ____ holds base address
  keep on consuming next (____) until (stop symbol)

  
  open
  close
  read
  write

  open(<path/filename> <flags>)
    O_RDONLY
    O_WRONLY
    O_RDWR

  open on error returns -1 and sets errno
    on term: perror <error number>

  file:
    name of (file) holds a descriptor to identify it
    keep on consuming next (byte)
    until...(EOF) stop symbol

  read/write(<file descriptor>,
             <memory location to read/write from>,
             <qty bytes to read/write>))

{
    int bytes_total = 100;
    int bytes_read = 0;
    int status = -1;

    char buffer[101];
    memset(buffer, '\0', 101);

    do {
      status = read(fd, buffer, 10);
      bytes_read += status > 0 ? status : 0;
    } while (status > 0);
}
/**
 *  @file       notes.txt
 *  @brief      Class notes
 *
 *  @author     Gemuele Aludino
 *  @date       12 Nov 2019
 *  @copyright  Copyright Â© 2019 Gemuele Aludino
 */

------------------------------------------------------------
LAST CLASS
------------------------------------------------------------
Files:
  - primitive types
  - functions
  - other pointers (void *)
  - user-defined types

What is an array?
  name (identifier) 
  of array is the base address of a block of memory.
  go index steps of length sizeof(typename),
    stop at capacity

What is a string:
  name (identifier) 
  of string is the base address of a block of memory.
  count bytes from base address until '\0' byte is reached

What is a function?
  name (identifier)
  of function is the base address of the instructions
  keep on consuming next (instruction) until ...
    (stop at ret) stop symbol

What is a ____?
  name (identifier)
  of ____ holds base address
  keep on consuming next (____) until (stop symbol)

  open
  close
  read
  write

  open(<path/filename> <flags>)
    O_RDONLY
    O_WRONLY
    O_RDWR

  open on error returns -1 and sets errno
    on term: perror <error number>

  file:
    name of (file) holds a descriptor to identify it
    keep on consuming next (byte)
    until...(EOF) stop symbol

  read/write(<file descriptor>,
             <memory location to read/write from>,
             <qty bytes to read/write>))

{
    int bytes_total = 100;
    int bytes_read = 0;
    int status = -1;

    char buffer[101];
    memset(buffer, '\0', 101);

    do {
      status = read(fd, buffer, 10);
      bytes_read += status > 0 ? status : 0;
    } while (status > 0);
}
------------------------------------------------------------
------------------------------------------------------------
Files:
  open(<path/name>, <flags>)
    O_RDONLY
    O_WRONLY
    O_RDWR
  
  fd: (open ret)
    < 0: error (check errno for reason)
    > 0: valid file descriptor

  read(<fd>, <addr>, <byte count>)
  write(<fd>, <addr>, <byte count>)
    read/write ret:
      < 0: error (check errno to find out why)
     == 0: for read - EOF, for write, did 0
      > 0: the amount of bytes read/written

  read/write are NON-BLOCKING.
  
  asynchronous - doing its own thing.

  close(<fd>)

  do {
    if ((status = read(fd, buffer + bytes_read, num_bytes - bytes_read)) < 0) {
      // error
    } else {
      // end of file
      break;
      bytes_read += status;
    }

  } while (bytes_read < num_bytes);

  buffer:
     0   1   2   3   4   5   6   7   8   9
    [h] [e] [l] [l] [o] [ ] [ ] [ ] [ ] [ ]

  file:
    hellothere

  file descriptor: I/O resource
  file handle: cursor/position in resource

  stateful:
  the parameters, plus something else, determines the result
  read(fd, buffer, bytes_read);
  read(fd, buffer, bytes_read);   /* you get the next ten bytes read into buffer */

  stateless:
  the parameters only determine the result
  tan(31.13);
  tan(31.13);                     /* same result returned */

  lseek:
  reposition read/write file offset

  #include <sys/types.h>
  #include <unistd.h>

  off_t lseek(int fd, off_t offset, int whence);

  shift the file handle (cursor/position) with lseek()
    can expand file by seeking past end and writing
    can find file size by seeking to end with 0 offset and grabbing return value

#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>

int open(const char *pathname, int flags);
int open(const char *pathname, int flags, mode_t mode);

int creat(const char *pathname, mode_t mode);

"123", convert this to the integer 123?

atoi("123");

#include <stdlib.h>

int atoi(const char *nptr);
long atol(const char *nptr);
long long atoll(const char *nptr);
slong long atoq(const char *nptr);
/**
 *  @file       notes.txt
 *  @brief      Class notes
 *
 *  @author     Gemuele Aludino
 *  @date       19 Nov 2019
 *  @copyright  Copyright Â© 2019 Gemuele Aludino
 */

------------------------------------------------------------
LAST CLASS:
------------------------------------------------------------
Final Exam
1600-1900 18 Dec
Location:
TBA

|  is BITWISE OR
|| is LOGICAL OR

O_CREAT is conditional.

STDIN_FILENO      0
STDOUT_FILENO     1
STDERR_FILENO     2

File descriptors can be used for:
- files
- anything that can be read/written to
- sockets

------------------------------------------------------------
sockets - file descriptor connected to somewhere on network
  client socket
  server socket

client:
  socket(): construct a basic socket
    set up data structures to represent the server
  connect(): connect client socket to some other server socket

server:
  socket(): construct a basic socket
  bind(): 'welds' socket to a given port number.
  listen(): make this a server socket that only listens for connections
  accept(): start listening for connection requests

  use a port > 8000.

  accept is a blocking call.
  it waits until you get a connection request
  once accept returns, you are not getting requests anymore
------------------------------------------------------------
------------------------------------------------------------
a file is metadata, attached to an address.

tty - teletype

int main(int argc, const char *argv[]) {
  printf("hello?\n");
  close(STDIN_FILENO);

  open("/dev/tty", O_WRONLY);
  printf("i'm back!\n");

  return EXIT_SUCCESS;
}

sockets
  file descriptors that allow you to talk
  to machines (processes) across a network
  (network file descriptor)

client:
  socket()
  connect()

server:
  socket()

  bind()

  listen()

  accept()  blocking call, until it gets a request, 
            then returns a socket connected to client side


max portno 
4096 >= n < 65536